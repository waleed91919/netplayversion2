{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport { Movie as TMDBMovie, Series as TMDBSeries } from './tmdb-api';\r\n\r\n// Initialize Prisma Client\r\nexport const prisma = new PrismaClient();\r\n\r\n// Helper function to convert TMDB Movie to Prisma Movie format\r\nexport const tmdbMovieToPrisma = (movie: TMDBMovie) => {\r\n  return {\r\n    id: movie.id,\r\n    title: movie.title,\r\n    overview: movie.overview || null,\r\n    posterPath: movie.poster_path,\r\n    backdropPath: movie.backdrop_path,\r\n    releaseDate: movie.release_date ? new Date(movie.release_date) : null,\r\n    voteAverage: movie.vote_average,\r\n    originalLanguage: movie.original_language,\r\n    runtime: movie.runtime || null,\r\n    popularity: 0, // Set default value\r\n  };\r\n};\r\n\r\n// Helper function to convert TMDB Series to Prisma Series format\r\nexport const tmdbSeriesToPrisma = (series: TMDBSeries) => {\r\n  return {\r\n    id: series.id,\r\n    name: series.name,\r\n    overview: series.overview || null,\r\n    posterPath: series.poster_path,\r\n    backdropPath: series.backdrop_path,\r\n    firstAirDate: series.first_air_date ? new Date(series.first_air_date) : null,\r\n    voteAverage: series.vote_average,\r\n    originalLanguage: series.original_language,\r\n    numberOfSeasons: null, // Requires additional API call\r\n    numberOfEpisodes: null, // Requires additional API call\r\n    popularity: 0, // Set default value\r\n  };\r\n};\r\n\r\n// Function to save movie to database\r\nexport async function saveMovie(movie: TMDBMovie) {\r\n  try {\r\n    const movieData = tmdbMovieToPrisma(movie);\r\n    \r\n    // Use upsert to handle both insert and update\r\n    const result = await prisma.movie.upsert({\r\n      where: { id: movie.id },\r\n      update: movieData,\r\n      create: movieData,\r\n    });\r\n    \r\n    // Handle genres if available\r\n    if (movie.genre_ids && movie.genre_ids.length > 0) {\r\n      // Delete existing connections first to avoid duplicates\r\n      await prisma.movieGenre.deleteMany({\r\n        where: { movieId: movie.id },\r\n      });\r\n      \r\n      // Create new connections\r\n      for (const genreId of movie.genre_ids) {\r\n        await prisma.movieGenre.create({\r\n          data: {\r\n            movieId: movie.id,\r\n            genreId: genreId,\r\n          },\r\n        });\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error saving movie:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to save series to database\r\nexport async function saveSeries(series: TMDBSeries) {\r\n  try {\r\n    const seriesData = tmdbSeriesToPrisma(series);\r\n    \r\n    // Use upsert to handle both insert and update\r\n    const result = await prisma.series.upsert({\r\n      where: { id: series.id },\r\n      update: seriesData,\r\n      create: seriesData,\r\n    });\r\n    \r\n    // Handle genres if available\r\n    if (series.genre_ids && series.genre_ids.length > 0) {\r\n      // Delete existing connections first to avoid duplicates\r\n      await prisma.seriesGenre.deleteMany({\r\n        where: { seriesId: series.id },\r\n      });\r\n      \r\n      // Create new connections\r\n      for (const genreId of series.genre_ids) {\r\n        await prisma.seriesGenre.create({\r\n          data: {\r\n            seriesId: series.id,\r\n            genreId: genreId,\r\n          },\r\n        });\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error saving series:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to update trending movies\r\nexport async function updateTrendingMovies(movies: TMDBMovie[]) {\r\n  try {\r\n    // First clear all existing trending movies\r\n    await prisma.trendingMovie.deleteMany({});\r\n    \r\n    // Then save each movie and add to trending\r\n    for (let i = 0; i < movies.length; i++) {\r\n      const movie = movies[i];\r\n      \r\n      // Save or update the movie first\r\n      await saveMovie(movie);\r\n      \r\n      // Add to trending with rank\r\n      await prisma.trendingMovie.create({\r\n        data: {\r\n          movieId: movie.id,\r\n          rank: i + 1,\r\n        }\r\n      });\r\n    }\r\n    \r\n    return { success: true, count: movies.length };\r\n  } catch (error) {\r\n    console.error('Error updating trending movies:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to update trending series\r\nexport async function updateTrendingSeries(series: TMDBSeries[]) {\r\n  try {\r\n    // First clear all existing trending series\r\n    await prisma.trendingSeries.deleteMany({});\r\n    \r\n    // Then save each series and add to trending\r\n    for (let i = 0; i < series.length; i++) {\r\n      const show = series[i];\r\n      \r\n      // Save or update the series first\r\n      await saveSeries(show);\r\n      \r\n      // Add to trending with rank\r\n      await prisma.trendingSeries.create({\r\n        data: {\r\n          seriesId: show.id,\r\n          rank: i + 1,\r\n        }\r\n      });\r\n    }\r\n    \r\n    return { success: true, count: series.length };\r\n  } catch (error) {\r\n    console.error('Error updating trending series:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to save genres\r\nexport async function saveGenres(genres: { id: number, name: string }[]) {\r\n  try {\r\n    for (const genre of genres) {\r\n      await prisma.genre.upsert({\r\n        where: { id: genre.id },\r\n        update: { name: genre.name },\r\n        create: { id: genre.id, name: genre.name },\r\n      });\r\n    }\r\n    \r\n    return { success: true, count: genres.length };\r\n  } catch (error) {\r\n    console.error('Error saving genres:', error);\r\n    throw error;\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/app/api/series/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    // Get query parameters from the URL\r\n    const { searchParams } = new URL(request.url);\r\n    const page = Number(searchParams.get('page')) || 1;\r\n    const limit = Number(searchParams.get('limit')) || 20;\r\n    const genreId = searchParams.get('genreId') ? Number(searchParams.get('genreId')) : undefined;\r\n    \r\n    // Calculate skip for pagination\r\n    const skip = (page - 1) * limit;\r\n    \r\n    // Build query filters\r\n    const where = genreId ? {\r\n      genres: {\r\n        some: {\r\n          genreId\r\n        }\r\n      }\r\n    } : {};\r\n    \r\n    // Fetch series with pagination\r\n    const seriesList = await prisma.series.findMany({\r\n      where,\r\n      include: {\r\n        genres: {\r\n          include: {\r\n            genre: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: {\r\n        popularity: 'desc'\r\n      },\r\n      skip,\r\n      take: limit\r\n    });\r\n    \r\n    // Get total count for pagination\r\n    const total = await prisma.series.count({ where });\r\n    \r\n    // Transform the data to match the expected format\r\n    const formattedSeries = seriesList.map((series) => {\r\n      return {\r\n        id: series.id,\r\n        name: series.name,\r\n        overview: series.overview,\r\n        poster_path: series.posterPath,\r\n        backdrop_path: series.backdropPath,\r\n        first_air_date: series.firstAirDate ? series.firstAirDate.toISOString().split('T')[0] : null,\r\n        vote_average: series.voteAverage,\r\n        genres: series.genres.map((sg) => ({\r\n          id: sg.genre.id,\r\n          name: sg.genre.name\r\n        })),\r\n        original_language: series.originalLanguage,\r\n        number_of_seasons: series.numberOfSeasons,\r\n        number_of_episodes: series.numberOfEpisodes\r\n      };\r\n    });\r\n    \r\n    return NextResponse.json({\r\n      results: formattedSeries,\r\n      page,\r\n      total_pages: Math.ceil(total / limit),\r\n      total_results: total\r\n    }, { status: 200 });\r\n  } catch (error) {\r\n    console.error('Error fetching series:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch series' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,oCAAoC;QACpC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,OAAO,OAAO,aAAa,GAAG,CAAC,YAAY;QACjD,MAAM,QAAQ,OAAO,aAAa,GAAG,CAAC,aAAa;QACnD,MAAM,UAAU,aAAa,GAAG,CAAC,aAAa,OAAO,aAAa,GAAG,CAAC,cAAc;QAEpF,gCAAgC;QAChC,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI;QAE1B,sBAAsB;QACtB,MAAM,QAAQ,UAAU;YACtB,QAAQ;gBACN,MAAM;oBACJ;gBACF;YACF;QACF,IAAI,CAAC;QAEL,+BAA+B;QAC/B,MAAM,aAAa,MAAM,kHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC9C;YACA,SAAS;gBACP,QAAQ;oBACN,SAAS;wBACP,OAAO;oBACT;gBACF;YACF;YACA,SAAS;gBACP,YAAY;YACd;YACA;YACA,MAAM;QACR;QAEA,iCAAiC;QACjC,MAAM,QAAQ,MAAM,kHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAAE;QAAM;QAEhD,kDAAkD;QAClD,MAAM,kBAAkB,WAAW,GAAG,CAAC,CAAC;YACtC,OAAO;gBACL,IAAI,OAAO,EAAE;gBACb,MAAM,OAAO,IAAI;gBACjB,UAAU,OAAO,QAAQ;gBACzB,aAAa,OAAO,UAAU;gBAC9B,eAAe,OAAO,YAAY;gBAClC,gBAAgB,OAAO,YAAY,GAAG,OAAO,YAAY,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;gBACxF,cAAc,OAAO,WAAW;gBAChC,QAAQ,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAO,CAAC;wBACjC,IAAI,GAAG,KAAK,CAAC,EAAE;wBACf,MAAM,GAAG,KAAK,CAAC,IAAI;oBACrB,CAAC;gBACD,mBAAmB,OAAO,gBAAgB;gBAC1C,mBAAmB,OAAO,eAAe;gBACzC,oBAAoB,OAAO,gBAAgB;YAC7C;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,aAAa,KAAK,IAAI,CAAC,QAAQ;YAC/B,eAAe;QACjB,GAAG;YAAE,QAAQ;QAAI;IACnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}