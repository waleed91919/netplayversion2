{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/lib/tmdb-api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = process.env.NEXT_PUBLIC_TMDB_API_KEY || '';\nconst BASE_URL = process.env.NEXT_PUBLIC_TMDB_API_URL || 'https://api.themoviedb.org/3';\nconst IMAGE_BASE_URL = process.env.NEXT_PUBLIC_TMDB_IMAGE_URL || 'https://image.tmdb.org/t/p';\n\nexport const IMAGE_SIZES = {\n  poster: {\n    small: 'w185',\n    medium: 'w342',\n    large: 'w500',\n    original: 'original'\n  },\n  backdrop: {\n    small: 'w300',\n    medium: 'w780',\n    large: 'w1280',\n    original: 'original'\n  },\n  profile: {\n    small: 'w45',\n    medium: 'w185',\n    large: 'h632',\n    original: 'original'\n  }\n};\n\nexport const getImageUrl = (path: string | null, size: string): string => {\n  if (!path) {\n    // Return a placeholder image from placeholder.com\n    if (size.includes('original')) {\n      return 'https://via.placeholder.com/1280x720?text=No+Image';\n    } else if (size.includes('w500')) {\n      return 'https://via.placeholder.com/500x750?text=No+Image';\n    } else if (size.includes('w342')) {\n      return 'https://via.placeholder.com/342x513?text=No+Image';\n    } else if (size.includes('w185')) {\n      return 'https://via.placeholder.com/185x278?text=No+Image';\n    }\n    return 'https://via.placeholder.com/300x450?text=No+Image';\n  }\n\n  // Check if path is already a full URL\n  if (path.startsWith('http')) {\n    return path;\n  }\n\n  return `${IMAGE_BASE_URL}/${size}${path}`;\n};\n\nconst tmdbApi = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n    language: 'de-DE',\n  },\n});\n\n// Types\nexport interface Movie {\n  id: number;\n  title: string;\n  overview: string;\n  poster_path: string | null;\n  backdrop_path: string | null;\n  release_date: string;\n  vote_average: number;\n  genre_ids: number[];\n  original_language: string;\n  runtime?: number;\n}\n\nexport interface Series {\n  id: number;\n  name: string;\n  overview: string;\n  poster_path: string | null;\n  backdrop_path: string | null;\n  first_air_date: string;\n  vote_average: number;\n  genre_ids: number[];\n  original_language: string;\n  episode_run_time?: number[];\n}\n\nexport interface Genre {\n  id: number;\n  name: string;\n}\n\nexport interface MediaResponse<T> {\n  page: number;\n  results: T[];\n  total_pages: number;\n  total_results: number;\n}\n\nexport interface ContentDetails extends Movie, Series {\n  genres: Genre[];\n  homepage?: string;\n  status?: string;\n  tagline?: string;\n  created_by?: any[];\n  number_of_seasons?: number;\n  number_of_episodes?: number;\n}\n\n// API Endpoints\nexport const apiEndpoints = {\n  // Movies\n  getTrendingMovies: () => tmdbApi.get<MediaResponse<Movie>>('/trending/movie/week'),\n  getPopularMovies: (page = 1) =>\n    tmdbApi.get<MediaResponse<Movie>>('/movie/popular', { params: { page } }),\n  getMovieById: (id: number) =>\n    tmdbApi.get<ContentDetails>(`/movie/${id}`),\n  getMoviesByGenre: (genreId: number, page = 1) =>\n    tmdbApi.get<MediaResponse<Movie>>('/discover/movie', {\n      params: { with_genres: genreId, page }\n    }),\n\n  // TV Series\n  getTrendingTVSeries: () => tmdbApi.get<MediaResponse<Series>>('/trending/tv/week'),\n  getPopularTVSeries: (page = 1) =>\n    tmdbApi.get<MediaResponse<Series>>('/tv/popular', { params: { page } }),\n  getTVSeriesById: (id: number) =>\n    tmdbApi.get<ContentDetails>(`/tv/${id}`),\n  getTVSeriesByGenre: (genreId: number, page = 1) =>\n    tmdbApi.get<MediaResponse<Series>>('/discover/tv', {\n      params: { with_genres: genreId, page }\n    }),\n\n  // Genres\n  getMovieGenres: () => tmdbApi.get<{genres: Genre[]}>('/genre/movie/list'),\n  getTVGenres: () => tmdbApi.get<{genres: Genre[]}>('/genre/tv/list'),\n\n  // Search\n  searchMulti: (query: string, page = 1) =>\n    tmdbApi.get<MediaResponse<Movie | Series>>('/search/multi', {\n      params: { query, page, include_adult: false }\n    }),\n  searchMovies: (query: string, page = 1) =>\n    tmdbApi.get<MediaResponse<Movie>>('/search/movie', {\n      params: { query, page, include_adult: false }\n    }),\n  searchTVSeries: (query: string, page = 1) =>\n    tmdbApi.get<MediaResponse<Series>>('/search/tv', {\n      params: { query, page, include_adult: false }\n    }),\n};\n\nexport default tmdbApi;\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,UAAU,wEAAwC;AACxD,MAAM,WAAW,oEAAwC;AACzD,MAAM,iBAAiB,kEAA0C;AAE1D,MAAM,cAAc;IACzB,QAAQ;QACN,OAAO;QACP,QAAQ;QACR,OAAO;QACP,UAAU;IACZ;IACA,UAAU;QACR,OAAO;QACP,QAAQ;QACR,OAAO;QACP,UAAU;IACZ;IACA,SAAS;QACP,OAAO;QACP,QAAQ;QACR,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,cAAc,CAAC,MAAqB;IAC/C,IAAI,CAAC,MAAM;QACT,kDAAkD;QAClD,IAAI,KAAK,QAAQ,CAAC,aAAa;YAC7B,OAAO;QACT,OAAO,IAAI,KAAK,QAAQ,CAAC,SAAS;YAChC,OAAO;QACT,OAAO,IAAI,KAAK,QAAQ,CAAC,SAAS;YAChC,OAAO;QACT,OAAO,IAAI,KAAK,QAAQ,CAAC,SAAS;YAChC,OAAO;QACT;QACA,OAAO;IACT;IAEA,sCAAsC;IACtC,IAAI,KAAK,UAAU,CAAC,SAAS;QAC3B,OAAO;IACT;IAEA,OAAO,GAAG,eAAe,CAAC,EAAE,OAAO,MAAM;AAC3C;AAEA,MAAM,UAAU,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC3B,SAAS;IACT,QAAQ;QACN,SAAS;QACT,UAAU;IACZ;AACF;AAoDO,MAAM,eAAe;IAC1B,SAAS;IACT,mBAAmB,IAAM,QAAQ,GAAG,CAAuB;IAC3D,kBAAkB,CAAC,OAAO,CAAC,GACzB,QAAQ,GAAG,CAAuB,kBAAkB;YAAE,QAAQ;gBAAE;YAAK;QAAE;IACzE,cAAc,CAAC,KACb,QAAQ,GAAG,CAAiB,CAAC,OAAO,EAAE,IAAI;IAC5C,kBAAkB,CAAC,SAAiB,OAAO,CAAC,GAC1C,QAAQ,GAAG,CAAuB,mBAAmB;YACnD,QAAQ;gBAAE,aAAa;gBAAS;YAAK;QACvC;IAEF,YAAY;IACZ,qBAAqB,IAAM,QAAQ,GAAG,CAAwB;IAC9D,oBAAoB,CAAC,OAAO,CAAC,GAC3B,QAAQ,GAAG,CAAwB,eAAe;YAAE,QAAQ;gBAAE;YAAK;QAAE;IACvE,iBAAiB,CAAC,KAChB,QAAQ,GAAG,CAAiB,CAAC,IAAI,EAAE,IAAI;IACzC,oBAAoB,CAAC,SAAiB,OAAO,CAAC,GAC5C,QAAQ,GAAG,CAAwB,gBAAgB;YACjD,QAAQ;gBAAE,aAAa;gBAAS;YAAK;QACvC;IAEF,SAAS;IACT,gBAAgB,IAAM,QAAQ,GAAG,CAAoB;IACrD,aAAa,IAAM,QAAQ,GAAG,CAAoB;IAElD,SAAS;IACT,aAAa,CAAC,OAAe,OAAO,CAAC,GACnC,QAAQ,GAAG,CAAgC,iBAAiB;YAC1D,QAAQ;gBAAE;gBAAO;gBAAM,eAAe;YAAM;QAC9C;IACF,cAAc,CAAC,OAAe,OAAO,CAAC,GACpC,QAAQ,GAAG,CAAuB,iBAAiB;YACjD,QAAQ;gBAAE;gBAAO;gBAAM,eAAe;YAAM;QAC9C;IACF,gBAAgB,CAAC,OAAe,OAAO,CAAC,GACtC,QAAQ,GAAG,CAAwB,cAAc;YAC/C,QAAQ;gBAAE;gBAAO;gBAAM,eAAe;YAAM;QAC9C;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/components/ui/media-card.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MediaCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call MediaCard() from the server but MediaCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/media-card.tsx <module evaluation>\",\n    \"MediaCard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,kEACA","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/components/ui/media-card.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MediaCard = registerClientReference(\n    function() { throw new Error(\"Attempted to call MediaCard() from the server but MediaCard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/media-card.tsx\",\n    \"MediaCard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8CACA","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/components/ui/search-bar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SearchBar = registerClientReference(\n    function() { throw new Error(\"Attempted to call SearchBar() from the server but SearchBar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/search-bar.tsx <module evaluation>\",\n    \"SearchBar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,kEACA","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/components/ui/search-bar.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SearchBar = registerClientReference(\n    function() { throw new Error(\"Attempted to call SearchBar() from the server but SearchBar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/search-bar.tsx\",\n    \"SearchBar\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8CACA","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file://E%3A/netplay-server/netplay/src/app/series/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\nimport { apiEndpoints, Series } from '@/lib/tmdb-api';\nimport { MediaCard } from '@/components/ui/media-card';\nimport { SearchBar } from '@/components/ui/search-bar';\n\nasync function getData() {\n  try {\n    const [popularSeries, tvGenres] = await Promise.all([\n      apiEndpoints.getPopularTVSeries(1),\n      apiEndpoints.getTVGenres(),\n    ]);\n\n    return {\n      series: popularSeries.data.results,\n      genres: tvGenres.data.genres,\n    };\n  } catch (error) {\n    console.error('Error fetching TV series:', error);\n    return {\n      series: [],\n      genres: [],\n    };\n  }\n}\n\nexport default async function SeriesPage() {\n  const { series, genres } = await getData();\n\n  // Generate years for filter\n  const currentYear = new Date().getFullYear();\n  const years = Array.from({ length: 20 }, (_, i) => (currentYear - i).toString());\n\n  // Countries for filter\n  const countries = [\n    { code: 'US', name: 'USA' },\n    { code: 'DE', name: 'Germany' },\n    { code: 'GB', name: 'UK' },\n    { code: 'FR', name: 'France' },\n    { code: 'JP', name: 'Japan' },\n    { code: 'KR', name: 'Korea' },\n    { code: 'IT', name: 'Italy' },\n    { code: 'ES', name: 'Spain' },\n  ];\n\n  return (\n    <div>\n      <div className=\"page-header mb-8\">\n        <h1 className=\"text-3xl font-bold mb-6\">Series</h1>\n        <SearchBar\n          genres={genres}\n          years={years}\n          countries={countries}\n          expanded={true}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4\">\n        <Suspense fallback={<p>Loading series...</p>}>\n          {series.map((show) => (\n            <MediaCard\n              key={show.id}\n              item={show}\n              type=\"tv\"\n              onAction={(action, item) => {\n                // Actions would be handled here in a client component\n                console.log(action, item);\n              }}\n            />\n          ))}\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAEA,eAAe;IACb,IAAI;QACF,MAAM,CAAC,eAAe,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;YAClD,yHAAA,CAAA,eAAY,CAAC,kBAAkB,CAAC;YAChC,yHAAA,CAAA,eAAY,CAAC,WAAW;SACzB;QAED,OAAO;YACL,QAAQ,cAAc,IAAI,CAAC,OAAO;YAClC,QAAQ,SAAS,IAAI,CAAC,MAAM;QAC9B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;YACL,QAAQ,EAAE;YACV,QAAQ,EAAE;QACZ;IACF;AACF;AAEe,eAAe;IAC5B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IAEjC,4BAA4B;IAC5B,MAAM,cAAc,IAAI,OAAO,WAAW;IAC1C,MAAM,QAAQ,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAG,GAAG,CAAC,GAAG,IAAM,CAAC,cAAc,CAAC,EAAE,QAAQ;IAE7E,uBAAuB;IACvB,MAAM,YAAY;QAChB;YAAE,MAAM;YAAM,MAAM;QAAM;QAC1B;YAAE,MAAM;YAAM,MAAM;QAAU;QAC9B;YAAE,MAAM;YAAM,MAAM;QAAK;QACzB;YAAE,MAAM;YAAM,MAAM;QAAS;QAC7B;YAAE,MAAM;YAAM,MAAM;QAAQ;QAC5B;YAAE,MAAM;YAAM,MAAM;QAAQ;QAC5B;YAAE,MAAM;YAAM,MAAM;QAAQ;QAC5B;YAAE,MAAM;YAAM,MAAM;QAAQ;KAC7B;IAED,qBACE,8OAAC;;0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA0B;;;;;;kCACxC,8OAAC,yIAAA,CAAA,YAAS;wBACR,QAAQ;wBACR,OAAO;wBACP,WAAW;wBACX,UAAU;;;;;;;;;;;;0BAId,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,qMAAA,CAAA,WAAQ;oBAAC,wBAAU,8OAAC;kCAAE;;;;;;8BACpB,OAAO,GAAG,CAAC,CAAC,qBACX,8OAAC,yIAAA,CAAA,YAAS;4BAER,MAAM;4BACN,MAAK;4BACL,UAAU,CAAC,QAAQ;gCACjB,sDAAsD;gCACtD,QAAQ,GAAG,CAAC,QAAQ;4BACtB;2BANK,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;AAa1B","debugId":null}}]
}